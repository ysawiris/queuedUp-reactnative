{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _assertThisInitialized2 = _interopRequireDefault(require(\"@babel/runtime/helpers/assertThisInitialized\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _rnSpotifySdk = _interopRequireDefault(require(\"rn-spotify-sdk\"));\n\nvar _jsxFileName = \"/Users/diyarkudrat/Term_5/spd1.5/react-native-spotify-master/example/InitialScreen.js\";\n\nvar InitialScreen = function (_PureComponent) {\n  (0, _inherits2.default)(InitialScreen, _PureComponent);\n\n  function InitialScreen(props) {\n    var _this;\n\n    (0, _classCallCheck2.default)(this, InitialScreen);\n    _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(InitialScreen).call(this, props));\n    _this.state = {\n      spotifyInitialized: false\n    };\n    _this.spotifyLoginButtonWasPressed = _this.spotifyLoginButtonWasPressed.bind((0, _assertThisInitialized2.default)(_this));\n    return _this;\n  }\n\n  (0, _createClass2.default)(InitialScreen, [{\n    key: \"goToPlayer\",\n    value: function goToPlayer() {\n      this.props.navigation.navigate(\"player\");\n    }\n  }, {\n    key: \"initializeIfNeeded\",\n    value: function initializeIfNeeded() {\n      var spotifyOptions, loggedIn;\n      return _regenerator.default.async(function initializeIfNeeded$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regenerator.default.awrap(_rnSpotifySdk.default.isInitializedAsync());\n\n            case 2:\n              if (_context.sent) {\n                _context.next = 11;\n                break;\n              }\n\n              spotifyOptions = {\n                clientID: \"d5a18c5bffce4415b6281c8d53e2e3af\",\n                sessionUserDefaultsKey: \"SpotifySession\",\n                redirectURL: \"examplespotifyapp://auth\",\n                scopes: [\"user-read-private\", \"playlist-read\", \"playlist-read-private\", \"streaming\"]\n              };\n              _context.next = 6;\n              return _regenerator.default.awrap(_rnSpotifySdk.default.initialize(spotifyOptions));\n\n            case 6:\n              loggedIn = _context.sent;\n              this.setState({\n                spotifyInitialized: true\n              });\n\n              if (loggedIn) {\n                this.goToPlayer();\n              }\n\n              _context.next = 16;\n              break;\n\n            case 11:\n              this.setState({\n                spotifyInitialized: true\n              });\n              _context.next = 14;\n              return _regenerator.default.awrap(_rnSpotifySdk.default.isLoggedInAsync());\n\n            case 14:\n              if (!_context.sent) {\n                _context.next = 16;\n                break;\n              }\n\n              this.goToPlayer();\n\n            case 16:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, this);\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.initializeIfNeeded().catch(function (error) {\n        _reactNative.Alert.alert(\"Error\", error.message);\n      });\n    }\n  }, {\n    key: \"spotifyLoginButtonWasPressed\",\n    value: function spotifyLoginButtonWasPressed() {\n      var _this2 = this;\n\n      _rnSpotifySdk.default.login().then(function (loggedIn) {\n        if (loggedIn) {\n          _this2.goToPlayer();\n        } else {}\n      }).catch(function (error) {\n        _reactNative.Alert.alert(\"Error\", error.message);\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      if (!this.state.spotifyInitialized) {\n        return _react.default.createElement(_reactNative.View, {\n          style: styles.container,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 95\n          }\n        }, _react.default.createElement(_reactNative.ActivityIndicator, {\n          animating: true,\n          style: styles.loadIndicator,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 96\n          }\n        }), _react.default.createElement(_reactNative.Text, {\n          style: styles.loadMessage,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 100\n          }\n        }, \"Loading...\"));\n      } else {\n        return _react.default.createElement(_reactNative.View, {\n          style: styles.container,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 105\n          }\n        }, _react.default.createElement(_reactNative.Text, {\n          style: styles.greeting,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 106\n          }\n        }, \"Hey! You! Log into your spotify\"), _react.default.createElement(_reactNative.TouchableHighlight, {\n          onPress: this.spotifyLoginButtonWasPressed,\n          style: styles.spotifyLoginButton,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 109\n          }\n        }, _react.default.createElement(_reactNative.Text, {\n          style: styles.spotifyLoginButtonText,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 113\n          }\n        }, \"Log into Spotify\")));\n      }\n    }\n  }]);\n  return InitialScreen;\n}(_react.PureComponent);\n\nexports.default = InitialScreen;\nInitialScreen.navigationOptions = {\n  header: null\n};\n\nvar styles = _reactNative.StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    backgroundColor: \"#F5FCFF\"\n  },\n  loadIndicator: {},\n  loadMessage: {\n    fontSize: 20,\n    textAlign: \"center\",\n    margin: 10\n  },\n  spotifyLoginButton: {\n    justifyContent: \"center\",\n    borderRadius: 18,\n    backgroundColor: \"green\",\n    overflow: \"hidden\",\n    width: 200,\n    height: 40,\n    margin: 20\n  },\n  spotifyLoginButtonText: {\n    fontSize: 20,\n    textAlign: \"center\",\n    color: \"white\"\n  },\n  greeting: {\n    fontSize: 20,\n    textAlign: \"center\",\n    margin: 10\n  }\n});","map":{"version":3,"sources":["/Users/diyarkudrat/Term_5/spd1.5/react-native-spotify-master/example/InitialScreen.js"],"names":["InitialScreen","props","state","spotifyInitialized","spotifyLoginButtonWasPressed","bind","navigation","navigate","Spotify","isInitializedAsync","spotifyOptions","clientID","sessionUserDefaultsKey","redirectURL","scopes","initialize","loggedIn","setState","goToPlayer","isLoggedInAsync","initializeIfNeeded","catch","error","Alert","alert","message","login","then","styles","container","loadIndicator","loadMessage","greeting","spotifyLoginButton","spotifyLoginButtonText","PureComponent","navigationOptions","header","StyleSheet","create","flex","justifyContent","alignItems","backgroundColor","fontSize","textAlign","margin","borderRadius","overflow","width","height","color"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AAQA;;;;IAEqBA,a;;;AAKjB,yBAAYC,KAAZ,EAAmB;AAAA;;AAAA;AACf,mHAAMA,KAAN;AAEA,UAAKC,KAAL,GAAa;AACTC,MAAAA,kBAAkB,EAAE;AADX,KAAb;AAGA,UAAKC,4BAAL,GAAoC,MAAKA,4BAAL,CAAkCC,IAAlC,6CAApC;AANe;AASlB;;;;iCAEY;AACT,WAAKJ,KAAL,CAAWK,UAAX,CAAsBC,QAAtB,CAA+B,QAA/B;AACH;;;;;;;;;;gDAIeC,sBAAQC,kBAAR,E;;;;;;;;AAEFC,cAAAA,c,GAAiB;AACnBC,gBAAAA,QAAQ,EAAE,kCADS;AAGnBC,gBAAAA,sBAAsB,EAAE,gBAHL;AAInBC,gBAAAA,WAAW,EAAE,0BAJM;AAKnBC,gBAAAA,MAAM,EAAE,CACJ,mBADI,EAEJ,eAFI,EAGJ,uBAHI,EAIJ,WAJI;AALW,e;;gDAYAN,sBAAQO,UAAR,CAAmBL,cAAnB,C;;;AAAjBM,cAAAA,Q;AAEN,mBAAKC,QAAL,CAAc;AACVd,gBAAAA,kBAAkB,EAAE;AADV,eAAd;;AAIA,kBAAIa,QAAJ,EAAc;AACV,qBAAKE,UAAL;AACH;;;;;;AAGD,mBAAKD,QAAL,CAAc;AACVd,gBAAAA,kBAAkB,EAAE;AADV,eAAd;;gDAIUK,sBAAQW,eAAR,E;;;;;;;;AACN,mBAAKD,UAAL;;;;;;;;;;;wCAKQ;AAChB,WAAKE,kBAAL,GAA0BC,KAA1B,CAAgC,UAACC,KAAD,EAAW;AACvCC,2BAAMC,KAAN,CAAY,OAAZ,EAAqBF,KAAK,CAACG,OAA3B;AACH,OAFD;AAGH;;;mDAE8B;AAAA;;AAE3BjB,4BAAQkB,KAAR,GACKC,IADL,CACU,UAACX,QAAD,EAAc;AAChB,YAAIA,QAAJ,EAAc;AAEV,UAAA,MAAI,CAACE,UAAL;AACH,SAHD,MAGO,CAEN;AACJ,OARL,EASKG,KATL,CASW,UAACC,KAAD,EAAW;AAEdC,2BAAMC,KAAN,CAAY,OAAZ,EAAqBF,KAAK,CAACG,OAA3B;AACH,OAZL;AAaH;;;6BAEQ;AACL,UAAI,CAAC,KAAKvB,KAAL,CAAWC,kBAAhB,EAAoC;AAChC,eACI,6BAAC,iBAAD;AAAM,UAAA,KAAK,EAAEyB,MAAM,CAACC,SAApB;AAAA;AAAA;AAAA;AAAA;AAAA,WACI,6BAAC,8BAAD;AACI,UAAA,SAAS,EAAE,IADf;AAEI,UAAA,KAAK,EAAED,MAAM,CAACE,aAFlB;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ,EAKI,6BAAC,iBAAD;AAAM,UAAA,KAAK,EAAEF,MAAM,CAACG,WAApB;AAAA;AAAA;AAAA;AAAA;AAAA,wBALJ,CADJ;AASH,OAVD,MAUO;AACH,eACI,6BAAC,iBAAD;AAAM,UAAA,KAAK,EAAEH,MAAM,CAACC,SAApB;AAAA;AAAA;AAAA;AAAA;AAAA,WACI,6BAAC,iBAAD;AAAM,UAAA,KAAK,EAAED,MAAM,CAACI,QAApB;AAAA;AAAA;AAAA;AAAA;AAAA,6CADJ,EAII,6BAAC,+BAAD;AACI,UAAA,OAAO,EAAE,KAAK5B,4BADlB;AAEI,UAAA,KAAK,EAAEwB,MAAM,CAACK,kBAFlB;AAAA;AAAA;AAAA;AAAA;AAAA,WAII,6BAAC,iBAAD;AAAM,UAAA,KAAK,EAAEL,MAAM,CAACM,sBAApB;AAAA;AAAA;AAAA;AAAA;AAAA,8BAJJ,CAJJ,CADJ;AAeH;AACJ;;;EA5GsCC,oB;;;AAAtBnC,a,CACVoC,iB,GAAoB;AACvBC,EAAAA,MAAM,EAAE;AADe,C;;AA8G/B,IAAMT,MAAM,GAAGU,wBAAWC,MAAX,CAAkB;AAC7BV,EAAAA,SAAS,EAAE;AACPW,IAAAA,IAAI,EAAE,CADC;AAEPC,IAAAA,cAAc,EAAE,QAFT;AAGPC,IAAAA,UAAU,EAAE,QAHL;AAIPC,IAAAA,eAAe,EAAE;AAJV,GADkB;AAQ7Bb,EAAAA,aAAa,EAAE,EARc;AAW7BC,EAAAA,WAAW,EAAE;AACTa,IAAAA,QAAQ,EAAE,EADD;AAETC,IAAAA,SAAS,EAAE,QAFF;AAGTC,IAAAA,MAAM,EAAE;AAHC,GAXgB;AAiB7Bb,EAAAA,kBAAkB,EAAE;AAChBQ,IAAAA,cAAc,EAAE,QADA;AAEhBM,IAAAA,YAAY,EAAE,EAFE;AAGhBJ,IAAAA,eAAe,EAAE,OAHD;AAIhBK,IAAAA,QAAQ,EAAE,QAJM;AAKhBC,IAAAA,KAAK,EAAE,GALS;AAMhBC,IAAAA,MAAM,EAAE,EANQ;AAOhBJ,IAAAA,MAAM,EAAE;AAPQ,GAjBS;AA0B7BZ,EAAAA,sBAAsB,EAAE;AACpBU,IAAAA,QAAQ,EAAE,EADU;AAEpBC,IAAAA,SAAS,EAAE,QAFS;AAGpBM,IAAAA,KAAK,EAAE;AAHa,GA1BK;AAgC7BnB,EAAAA,QAAQ,EAAE;AACNY,IAAAA,QAAQ,EAAE,EADJ;AAENC,IAAAA,SAAS,EAAE,QAFL;AAGNC,IAAAA,MAAM,EAAE;AAHF;AAhCmB,CAAlB,CAAf","sourcesContent":["import React, { PureComponent } from \"react\";\nimport {\n    ActivityIndicator,\n    Alert,\n    StyleSheet,\n    Text,\n    TouchableHighlight,\n    View,\n} from \"react-native\";\nimport Spotify from \"rn-spotify-sdk\";\n\nexport default class InitialScreen extends PureComponent {\n    static navigationOptions = {\n        header: null,\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            spotifyInitialized: false,\n        };\n        this.spotifyLoginButtonWasPressed = this.spotifyLoginButtonWasPressed.bind(\n            this\n        );\n    }\n\n    goToPlayer() {\n        this.props.navigation.navigate(\"player\");\n    }\n\n    async initializeIfNeeded() {\n        // initialize Spotify if it hasn't been initialized yet\n        if (!(await Spotify.isInitializedAsync())) {\n            // initialize spotify\n            const spotifyOptions = {\n                clientID: \"d5a18c5bffce4415b6281c8d53e2e3af\",\n                // clientSecret: \"332b65ac9bb04f4cbc6ec43077290db9\",\n                sessionUserDefaultsKey: \"SpotifySession\",\n                redirectURL: \"examplespotifyapp://auth\",\n                scopes: [\n                    \"user-read-private\",\n                    \"playlist-read\",\n                    \"playlist-read-private\",\n                    \"streaming\",\n                ],\n            };\n            const loggedIn = await Spotify.initialize(spotifyOptions);\n            // update UI state\n            this.setState({\n                spotifyInitialized: true,\n            });\n            // handle initialization\n            if (loggedIn) {\n                this.goToPlayer();\n            }\n        } else {\n            // update UI state\n            this.setState({\n                spotifyInitialized: true,\n            });\n            // handle logged in\n            if (await Spotify.isLoggedInAsync()) {\n                this.goToPlayer();\n            }\n        }\n    }\n\n    componentDidMount() {\n        this.initializeIfNeeded().catch((error) => {\n            Alert.alert(\"Error\", error.message);\n        });\n    }\n\n    spotifyLoginButtonWasPressed() {\n        // log into Spotify\n        Spotify.login()\n            .then((loggedIn) => {\n                if (loggedIn) {\n                    // logged in\n                    this.goToPlayer();\n                } else {\n                    // cancelled\n                }\n            })\n            .catch((error) => {\n                // error\n                Alert.alert(\"Error\", error.message);\n            });\n    }\n\n    render() {\n        if (!this.state.spotifyInitialized) {\n            return (\n                <View style={styles.container}>\n                    <ActivityIndicator\n                        animating={true}\n                        style={styles.loadIndicator}\n                    ></ActivityIndicator>\n                    <Text style={styles.loadMessage}>Loading...</Text>\n                </View>\n            );\n        } else {\n            return (\n                <View style={styles.container}>\n                    <Text style={styles.greeting}>\n                        Hey! You! Log into your spotify\n                    </Text>\n                    <TouchableHighlight\n                        onPress={this.spotifyLoginButtonWasPressed}\n                        style={styles.spotifyLoginButton}\n                    >\n                        <Text style={styles.spotifyLoginButtonText}>\n                            Log into Spotify\n                        </Text>\n                    </TouchableHighlight>\n                </View>\n            );\n        }\n    }\n}\n\nconst styles = StyleSheet.create({\n    container: {\n        flex: 1,\n        justifyContent: \"center\",\n        alignItems: \"center\",\n        backgroundColor: \"#F5FCFF\",\n    },\n\n    loadIndicator: {\n        //\n    },\n    loadMessage: {\n        fontSize: 20,\n        textAlign: \"center\",\n        margin: 10,\n    },\n\n    spotifyLoginButton: {\n        justifyContent: \"center\",\n        borderRadius: 18,\n        backgroundColor: \"green\",\n        overflow: \"hidden\",\n        width: 200,\n        height: 40,\n        margin: 20,\n    },\n    spotifyLoginButtonText: {\n        fontSize: 20,\n        textAlign: \"center\",\n        color: \"white\",\n    },\n\n    greeting: {\n        fontSize: 20,\n        textAlign: \"center\",\n        margin: 10,\n    },\n});\n"]},"metadata":{},"sourceType":"script"}