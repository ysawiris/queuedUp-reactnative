{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports._TESTING_ONLY_reset_container_count = _TESTING_ONLY_reset_container_count;\nexports.default = createNavigationContainer;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _core = require(\"@react-navigation/core\");\n\nvar _invariant = _interopRequireDefault(require(\"./utils/invariant\"));\n\nvar _docsUrl = _interopRequireDefault(require(\"./utils/docsUrl\"));\n\nvar _jsxFileName = \"/Users/diyarkudrat/Term_5/spd1.5/react-native-spotify-master/example/node_modules/@react-navigation/native/dist/createAppContainer.js\";\nvar urlToPathAndParams = _core.pathUtils.urlToPathAndParams;\n\nfunction isStateful(props) {\n  return !props.navigation;\n}\n\nfunction validateProps(props) {\n  if (props.persistenceKey) {\n    console.warn('You passed persistenceKey prop to a navigator. ' + 'The persistenceKey prop was replaced by a more flexible persistence mechanism, ' + 'please see the navigation state persistence docs for more information. ' + 'Passing the persistenceKey prop is a no-op.');\n  }\n\n  if (isStateful(props)) {\n    return;\n  }\n\n  var navigation = props.navigation,\n      screenProps = props.screenProps,\n      persistNavigationState = props.persistNavigationState,\n      loadNavigationState = props.loadNavigationState,\n      containerProps = (0, _objectWithoutProperties2.default)(props, [\"navigation\", \"screenProps\", \"persistNavigationState\", \"loadNavigationState\"]);\n  var keys = Object.keys(containerProps);\n\n  if (keys.length !== 0) {\n    throw new Error('This navigator has both navigation and container props, so it is ' + (\"unclear if it should own its own state. Remove props: \\\"\" + keys.join(', ') + \"\\\" \") + 'if the navigator should get its state from the navigation prop. If the ' + 'navigator should maintain its own state, do not pass a navigation prop.');\n  }\n\n  (0, _invariant.default)(persistNavigationState === undefined && loadNavigationState === undefined || typeof persistNavigationState === 'function' && typeof loadNavigationState === 'function', 'both persistNavigationState and loadNavigationState must either be undefined, or be functions');\n}\n\nvar _statefulContainerCount = 0;\n\nfunction _TESTING_ONLY_reset_container_count() {\n  _statefulContainerCount = 0;\n}\n\nvar _reactNavigationIsHydratingState = false;\n\nfunction createNavigationContainer(Component) {\n  var NavigationContainer = function (_React$Component) {\n    (0, _inherits2.default)(NavigationContainer, _React$Component);\n    (0, _createClass2.default)(NavigationContainer, null, [{\n      key: \"getDerivedStateFromProps\",\n      value: function getDerivedStateFromProps(nextProps) {\n        validateProps(nextProps);\n        return null;\n      }\n    }]);\n\n    function NavigationContainer(props) {\n      var _this;\n\n      (0, _classCallCheck2.default)(this, NavigationContainer);\n      _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(NavigationContainer).call(this, props));\n      _this.subs = null;\n      _this._actionEventSubscribers = new Set();\n\n      _this._handleOpenURL = function (_ref) {\n        var url = _ref.url;\n        var _this$props = _this.props,\n            enableURLHandling = _this$props.enableURLHandling,\n            uriPrefix = _this$props.uriPrefix;\n\n        if (enableURLHandling === false) {\n          return;\n        }\n\n        var parsedUrl = urlToPathAndParams(url, uriPrefix);\n\n        if (parsedUrl) {\n          var path = parsedUrl.path,\n              params = parsedUrl.params;\n          var action = Component.router.getActionForPathAndParams(path, params);\n\n          if (action) {\n            _this.dispatch(action);\n          }\n        }\n      };\n\n      _this._persistNavigationState = function _callee(nav) {\n        var persistNavigationState;\n        return _regenerator.default.async(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                persistNavigationState = _this.props.persistNavigationState;\n\n                if (!persistNavigationState) {\n                  _context.next = 10;\n                  break;\n                }\n\n                _context.prev = 2;\n                _context.next = 5;\n                return _regenerator.default.awrap(persistNavigationState(nav));\n\n              case 5:\n                _context.next = 10;\n                break;\n\n              case 7:\n                _context.prev = 7;\n                _context.t0 = _context[\"catch\"](2);\n                console.warn('Uncaught exception while calling persistNavigationState()! You should handle exceptions thrown from persistNavigationState(), ignoring them may result in undefined behavior.');\n\n              case 10:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, null, null, [[2, 7]]);\n      };\n\n      _this.dispatch = function (action) {\n        if (_this.props.navigation) {\n          return _this.props.navigation.dispatch(action);\n        }\n\n        _this._navState = _this._navState || _this.state.nav;\n        var lastNavState = _this._navState;\n        (0, _invariant.default)(lastNavState, 'should be set in constructor if stateful');\n        var reducedState = Component.router.getStateForAction(action, lastNavState);\n        var navState = reducedState === null ? lastNavState : reducedState;\n\n        var dispatchActionEvents = function dispatchActionEvents() {\n          _this._actionEventSubscribers.forEach(function (subscriber) {\n            return subscriber({\n              type: 'action',\n              action: action,\n              state: navState,\n              lastState: lastNavState\n            });\n          });\n        };\n\n        if (reducedState === null) {\n          dispatchActionEvents();\n          return true;\n        }\n\n        if (navState !== lastNavState) {\n          _this._navState = navState;\n\n          _this.setState({\n            nav: navState\n          }, function () {\n            _this._onNavigationStateChange(lastNavState, navState, action);\n\n            dispatchActionEvents();\n\n            _this._persistNavigationState(navState);\n          });\n\n          return true;\n        }\n\n        dispatchActionEvents();\n        return false;\n      };\n\n      _this._getScreenProps = function () {\n        return _this.props.screenProps;\n      };\n\n      validateProps(props);\n      _this._initialAction = _core.NavigationActions.init();\n\n      if (_this._isStateful() && _reactNative.BackHandler && typeof _reactNative.BackHandler.addEventListener === 'function') {\n        _this.subs = _reactNative.BackHandler.addEventListener('hardwareBackPress', function () {\n          if (!_this._isMounted) {\n            _this.subs && _this.subs.remove();\n          } else {\n            return _this.dispatch(_core.NavigationActions.back());\n          }\n        });\n      }\n\n      _this.state = {\n        nav: _this._isStateful() && !props.loadNavigationState ? Component.router.getStateForAction(_this._initialAction) : null\n      };\n      return _this;\n    }\n\n    (0, _createClass2.default)(NavigationContainer, [{\n      key: \"_renderLoading\",\n      value: function _renderLoading() {\n        return this.props.renderLoadingExperimental ? this.props.renderLoadingExperimental() : null;\n      }\n    }, {\n      key: \"_isStateful\",\n      value: function _isStateful() {\n        return isStateful(this.props);\n      }\n    }, {\n      key: \"_validateProps\",\n      value: function _validateProps(props) {\n        if (this._isStateful()) {\n          return;\n        }\n\n        var navigation = props.navigation,\n            screenProps = props.screenProps,\n            containerProps = (0, _objectWithoutProperties2.default)(props, [\"navigation\", \"screenProps\"]);\n        var keys = Object.keys(containerProps);\n\n        if (keys.length !== 0) {\n          throw new Error('This navigator has both navigation and container props, so it is ' + (\"unclear if it should own its own state. Remove props: \\\"\" + keys.join(', ') + \"\\\" \") + 'if the navigator should get its state from the navigation prop. If the ' + 'navigator should maintain its own state, do not pass a navigation prop.');\n        }\n      }\n    }, {\n      key: \"_onNavigationStateChange\",\n      value: function _onNavigationStateChange(prevNav, nav, action) {\n        if (typeof this.props.onNavigationStateChange === 'undefined' && this._isStateful() && !!process.env.REACT_NAV_LOGGING) {\n          if (console.group) {\n            console.group('Navigation Dispatch: ');\n            console.log('Action: ', action);\n            console.log('New State: ', nav);\n            console.log('Last State: ', prevNav);\n            console.groupEnd();\n          } else {\n            console.log('Navigation Dispatch: ', {\n              action: action,\n              newState: nav,\n              lastState: prevNav\n            });\n          }\n\n          return;\n        }\n\n        if (typeof this.props.onNavigationStateChange === 'function') {\n          this.props.onNavigationStateChange(prevNav, nav, action);\n        }\n      }\n    }, {\n      key: \"componentDidUpdate\",\n      value: function componentDidUpdate() {\n        if (this._navState === this.state.nav) {\n          this._navState = null;\n        }\n      }\n    }, {\n      key: \"componentDidMount\",\n      value: function componentDidMount() {\n        var _this2 = this;\n\n        var parsedUrl, userProvidedStartupState, _await$this$getStartu, action, startupState, _parsedUrl, path, params, urlAction, dispatchActions;\n\n        return _regenerator.default.async(function componentDidMount$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                this._isMounted = true;\n\n                if (this._isStateful()) {\n                  _context2.next = 3;\n                  break;\n                }\n\n                return _context2.abrupt(\"return\");\n\n              case 3:\n                if (__DEV__ && !this.props.detached) {\n                  if (_statefulContainerCount > 0) {\n                    if (_reactNative.Platform.OS === 'ios') {\n                      console.warn(\"You should only render one navigator explicitly in your app, and other navigators should be rendered by including them in that navigator. Full details at: \" + (0, _docsUrl.default)('common-mistakes.html#explicitly-rendering-more-than-one-navigator'));\n                    }\n                  }\n                }\n\n                _statefulContainerCount++;\n\n                _reactNative.Linking.addEventListener('url', this._handleOpenURL);\n\n                parsedUrl = null;\n                userProvidedStartupState = null;\n\n                if (!(this.props.enableURLHandling !== false)) {\n                  _context2.next = 14;\n                  break;\n                }\n\n                _context2.next = 11;\n                return _regenerator.default.awrap(this.getStartupParams());\n\n              case 11:\n                _await$this$getStartu = _context2.sent;\n                parsedUrl = _await$this$getStartu.parsedUrl;\n                userProvidedStartupState = _await$this$getStartu.userProvidedStartupState;\n\n              case 14:\n                action = this._initialAction;\n                startupState = this.state.nav;\n\n                if (!startupState && !userProvidedStartupState) {\n                  !!process.env.REACT_NAV_LOGGING && console.log('Init new Navigation State');\n                  startupState = Component.router.getStateForAction(action);\n                }\n\n                if (userProvidedStartupState) {\n                  startupState = userProvidedStartupState;\n                  _reactNavigationIsHydratingState = true;\n                }\n\n                if (parsedUrl) {\n                  _parsedUrl = parsedUrl, path = _parsedUrl.path, params = _parsedUrl.params;\n                  urlAction = Component.router.getActionForPathAndParams(path, params);\n\n                  if (urlAction) {\n                    !!process.env.REACT_NAV_LOGGING && console.log('Applying Navigation Action for Initial URL:', parsedUrl);\n                    action = urlAction;\n                    startupState = Component.router.getStateForAction(urlAction, startupState);\n                  }\n                }\n\n                dispatchActions = function dispatchActions() {\n                  return _this2._actionEventSubscribers.forEach(function (subscriber) {\n                    return subscriber({\n                      type: 'action',\n                      action: action,\n                      state: _this2.state.nav,\n                      lastState: null\n                    });\n                  });\n                };\n\n                if (!(startupState === this.state.nav)) {\n                  _context2.next = 23;\n                  break;\n                }\n\n                dispatchActions();\n                return _context2.abrupt(\"return\");\n\n              case 23:\n                this.setState({\n                  nav: startupState\n                }, function () {\n                  _reactNavigationIsHydratingState = false;\n                  dispatchActions();\n                });\n\n              case 24:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, null, this);\n      }\n    }, {\n      key: \"getStartupParams\",\n      value: function getStartupParams() {\n        var _this$props2, uriPrefix, loadNavigationState, url, loadedNavState, _await$Promise$all, _await$Promise$all2;\n\n        return _regenerator.default.async(function getStartupParams$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _this$props2 = this.props, uriPrefix = _this$props2.uriPrefix, loadNavigationState = _this$props2.loadNavigationState;\n                _context3.prev = 1;\n                _context3.next = 4;\n                return _regenerator.default.awrap(Promise.all([_reactNative.Linking.getInitialURL(), loadNavigationState && loadNavigationState()]));\n\n              case 4:\n                _await$Promise$all = _context3.sent;\n                _await$Promise$all2 = (0, _slicedToArray2.default)(_await$Promise$all, 2);\n                url = _await$Promise$all2[0];\n                loadedNavState = _await$Promise$all2[1];\n                _context3.next = 12;\n                break;\n\n              case 10:\n                _context3.prev = 10;\n                _context3.t0 = _context3[\"catch\"](1);\n\n              case 12:\n                return _context3.abrupt(\"return\", {\n                  parsedUrl: url && urlToPathAndParams(url, uriPrefix),\n                  userProvidedStartupState: loadedNavState\n                });\n\n              case 13:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, null, this, [[1, 10]]);\n      }\n    }, {\n      key: \"componentDidCatch\",\n      value: function componentDidCatch(e) {\n        if (_reactNavigationIsHydratingState) {\n          _reactNavigationIsHydratingState = false;\n          console.warn('Uncaught exception while starting app from persisted navigation state! Trying to render again with a fresh navigation state...');\n          this.dispatch(_core.NavigationActions.init());\n        } else {\n          throw e;\n        }\n      }\n    }, {\n      key: \"componentWillUnmount\",\n      value: function componentWillUnmount() {\n        this._isMounted = false;\n\n        _reactNative.Linking.removeEventListener('url', this._handleOpenURL);\n\n        this.subs && this.subs.remove();\n\n        if (this._isStateful()) {\n          _statefulContainerCount--;\n        }\n      }\n    }, {\n      key: \"render\",\n      value: function render() {\n        var _this3 = this;\n\n        var navigation = this.props.navigation;\n\n        if (this._isStateful()) {\n          var navState = this.state.nav;\n\n          if (!navState) {\n            return this._renderLoading();\n          }\n\n          if (!this._navigation || this._navigation.state !== navState) {\n            this._navigation = (0, _core.getNavigation)(Component.router, navState, this.dispatch, this._actionEventSubscribers, this._getScreenProps, function () {\n              return _this3._navigation;\n            });\n          }\n\n          navigation = this._navigation;\n        }\n\n        (0, _invariant.default)(navigation, 'failed to get navigation');\n        return _react.default.createElement(_core.NavigationProvider, {\n          value: navigation,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 347\n          }\n        }, _react.default.createElement(Component, (0, _extends2.default)({}, this.props, {\n          navigation: navigation,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 348\n          }\n        })));\n      }\n    }]);\n    return NavigationContainer;\n  }(_react.default.Component);\n\n  NavigationContainer.router = Component.router;\n  NavigationContainer.navigationOptions = null;\n  return NavigationContainer;\n}","map":{"version":3,"sources":["/Users/diyarkudrat/Term_5/spd1.5/react-native-spotify-master/example/node_modules/@react-navigation/native/dist/createAppContainer.js"],"names":["urlToPathAndParams","pathUtils","isStateful","props","navigation","validateProps","persistenceKey","console","warn","screenProps","persistNavigationState","loadNavigationState","containerProps","keys","Object","length","Error","join","undefined","_statefulContainerCount","_TESTING_ONLY_reset_container_count","_reactNavigationIsHydratingState","createNavigationContainer","Component","NavigationContainer","nextProps","subs","_actionEventSubscribers","Set","_handleOpenURL","url","enableURLHandling","uriPrefix","parsedUrl","path","params","action","router","getActionForPathAndParams","dispatch","_persistNavigationState","nav","_navState","state","lastNavState","reducedState","getStateForAction","navState","dispatchActionEvents","forEach","subscriber","type","lastState","setState","_onNavigationStateChange","_getScreenProps","_initialAction","NavigationActions","init","_isStateful","BackHandler","addEventListener","_isMounted","remove","back","renderLoadingExperimental","prevNav","onNavigationStateChange","process","env","REACT_NAV_LOGGING","group","log","groupEnd","newState","__DEV__","detached","Platform","OS","Linking","userProvidedStartupState","getStartupParams","startupState","urlAction","dispatchActions","Promise","all","getInitialURL","loadedNavState","e","removeEventListener","_renderLoading","_navigation","React","navigationOptions"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Linking, Platform, BackHandler } from 'react-native';\nimport { NavigationActions, pathUtils, getNavigation, NavigationProvider } from '@react-navigation/core';\nimport invariant from './utils/invariant';\nimport docsUrl from './utils/docsUrl';\n\nconst { urlToPathAndParams } = pathUtils;\n\nfunction isStateful(props) {\n  return !props.navigation;\n}\n\nfunction validateProps(props) {\n  if (props.persistenceKey) {\n    console.warn('You passed persistenceKey prop to a navigator. ' + 'The persistenceKey prop was replaced by a more flexible persistence mechanism, ' + 'please see the navigation state persistence docs for more information. ' + 'Passing the persistenceKey prop is a no-op.');\n  }\n  if (isStateful(props)) {\n    return;\n  }\n  /* eslint-disable no-unused-vars */\n  const {\n    navigation,\n    screenProps,\n    persistNavigationState,\n    loadNavigationState,\n    ...containerProps\n  } = props;\n  /* eslint-enable no-unused-vars */\n\n  const keys = Object.keys(containerProps);\n\n  if (keys.length !== 0) {\n    throw new Error('This navigator has both navigation and container props, so it is ' + `unclear if it should own its own state. Remove props: \"${keys.join(', ')}\" ` + 'if the navigator should get its state from the navigation prop. If the ' + 'navigator should maintain its own state, do not pass a navigation prop.');\n  }\n  invariant(persistNavigationState === undefined && loadNavigationState === undefined || typeof persistNavigationState === 'function' && typeof loadNavigationState === 'function', 'both persistNavigationState and loadNavigationState must either be undefined, or be functions');\n}\n\n// Track the number of stateful container instances. Warn if >0 and not using the\n// detached prop to explicitly acknowledge the behavior. We should deprecated implicit\n// stateful navigation containers in a future release and require a provider style pattern\n// instead in order to eliminate confusion entirely.\nlet _statefulContainerCount = 0;\nexport function _TESTING_ONLY_reset_container_count() {\n  _statefulContainerCount = 0;\n}\n\n// We keep a global flag to catch errors during the state persistence hydrating scenario.\n// The innermost navigator who catches the error will dispatch a new init action.\nlet _reactNavigationIsHydratingState = false;\n// Unfortunate to use global state here, but it seems necessesary for the time\n// being. There seems to be some problems with cascading componentDidCatch\n// handlers. Ideally the inner non-stateful navigator catches the error and\n// re-throws it, to be caught by the top-level stateful navigator.\n\n/**\n * Create an HOC that injects the navigation and manages the navigation state\n * in case it's not passed from above.\n * This allows to use e.g. the StackNavigator and TabNavigator as root-level\n * components.\n */\nexport default function createNavigationContainer(Component) {\n  class NavigationContainer extends React.Component {\n    subs = null;\n\n    static router = Component.router;\n    static navigationOptions = null;\n\n    static getDerivedStateFromProps(nextProps) {\n      validateProps(nextProps);\n      return null;\n    }\n\n    _actionEventSubscribers = new Set();\n\n    constructor(props) {\n      super(props);\n\n      validateProps(props);\n\n      this._initialAction = NavigationActions.init();\n\n      if (this._isStateful() && BackHandler && typeof BackHandler.addEventListener === 'function') {\n        this.subs = BackHandler.addEventListener('hardwareBackPress', () => {\n          if (!this._isMounted) {\n            this.subs && this.subs.remove();\n          } else {\n            // dispatch returns true if the action results in a state change,\n            // and false otherwise. This maps well to what BackHandler expects\n            // from a callback -- true if handled, false if not handled\n            return this.dispatch(NavigationActions.back());\n          }\n        });\n      }\n\n      this.state = {\n        nav: this._isStateful() && !props.loadNavigationState ? Component.router.getStateForAction(this._initialAction) : null\n      };\n    }\n\n    _renderLoading() {\n      return this.props.renderLoadingExperimental ? this.props.renderLoadingExperimental() : null;\n    }\n\n    _isStateful() {\n      return isStateful(this.props);\n    }\n\n    _validateProps(props) {\n      if (this._isStateful()) {\n        return;\n      }\n\n      // eslint-disable-next-line no-unused-vars\n      const { navigation, screenProps, ...containerProps } = props;\n\n      const keys = Object.keys(containerProps);\n\n      if (keys.length !== 0) {\n        throw new Error('This navigator has both navigation and container props, so it is ' + `unclear if it should own its own state. Remove props: \"${keys.join(', ')}\" ` + 'if the navigator should get its state from the navigation prop. If the ' + 'navigator should maintain its own state, do not pass a navigation prop.');\n      }\n    }\n\n    _handleOpenURL = ({ url }) => {\n      const { enableURLHandling, uriPrefix } = this.props;\n      if (enableURLHandling === false) {\n        return;\n      }\n      const parsedUrl = urlToPathAndParams(url, uriPrefix);\n      if (parsedUrl) {\n        const { path, params } = parsedUrl;\n        const action = Component.router.getActionForPathAndParams(path, params);\n        if (action) {\n          this.dispatch(action);\n        }\n      }\n    };\n\n    _onNavigationStateChange(prevNav, nav, action) {\n      if (typeof this.props.onNavigationStateChange === 'undefined' && this._isStateful() && !!process.env.REACT_NAV_LOGGING) {\n        if (console.group) {\n          console.group('Navigation Dispatch: ');\n          console.log('Action: ', action);\n          console.log('New State: ', nav);\n          console.log('Last State: ', prevNav);\n          console.groupEnd();\n        } else {\n          console.log('Navigation Dispatch: ', {\n            action,\n            newState: nav,\n            lastState: prevNav\n          });\n        }\n        return;\n      }\n\n      if (typeof this.props.onNavigationStateChange === 'function') {\n        this.props.onNavigationStateChange(prevNav, nav, action);\n      }\n    }\n\n    componentDidUpdate() {\n      // Clear cached _navState every tick\n      if (this._navState === this.state.nav) {\n        this._navState = null;\n      }\n    }\n\n    async componentDidMount() {\n      this._isMounted = true;\n      if (!this._isStateful()) {\n        return;\n      }\n\n      if (__DEV__ && !this.props.detached) {\n        if (_statefulContainerCount > 0) {\n          // Temporarily only show this on iOS due to this issue:\n          // https://github.com/react-navigation/react-navigation/issues/4196#issuecomment-390827829\n          if (Platform.OS === 'ios') {\n            console.warn(`You should only render one navigator explicitly in your app, and other navigators should be rendered by including them in that navigator. Full details at: ${docsUrl('common-mistakes.html#explicitly-rendering-more-than-one-navigator')}`);\n          }\n        }\n      }\n      _statefulContainerCount++;\n      Linking.addEventListener('url', this._handleOpenURL);\n\n      // Pull out anything that can impact state\n      let parsedUrl = null;\n      let userProvidedStartupState = null;\n      if (this.props.enableURLHandling !== false) {\n        ({\n          parsedUrl,\n          userProvidedStartupState\n        } = await this.getStartupParams());\n      }\n\n      // Initialize state. This must be done *after* any async code\n      // so we don't end up with a different value for this.state.nav\n      // due to changes while async function was resolving\n      let action = this._initialAction;\n      let startupState = this.state.nav;\n      if (!startupState && !userProvidedStartupState) {\n        !!process.env.REACT_NAV_LOGGING && console.log('Init new Navigation State');\n        startupState = Component.router.getStateForAction(action);\n      }\n\n      // Pull user-provided persisted state\n      if (userProvidedStartupState) {\n        startupState = userProvidedStartupState;\n        _reactNavigationIsHydratingState = true;\n      }\n\n      // Pull state out of URL\n      if (parsedUrl) {\n        const { path, params } = parsedUrl;\n        const urlAction = Component.router.getActionForPathAndParams(path, params);\n        if (urlAction) {\n          !!process.env.REACT_NAV_LOGGING && console.log('Applying Navigation Action for Initial URL:', parsedUrl);\n          action = urlAction;\n          startupState = Component.router.getStateForAction(urlAction, startupState);\n        }\n      }\n\n      const dispatchActions = () => this._actionEventSubscribers.forEach(subscriber => subscriber({\n        type: 'action',\n        action,\n        state: this.state.nav,\n        lastState: null\n      }));\n\n      if (startupState === this.state.nav) {\n        dispatchActions();\n        return;\n      }\n\n      // eslint-disable-next-line react/no-did-mount-set-state\n      this.setState({ nav: startupState }, () => {\n        _reactNavigationIsHydratingState = false;\n        dispatchActions();\n      });\n    }\n\n    async getStartupParams() {\n      const { uriPrefix, loadNavigationState } = this.props;\n      let url, loadedNavState;\n      try {\n        [url, loadedNavState] = await Promise.all([Linking.getInitialURL(), loadNavigationState && loadNavigationState()]);\n      } catch (err) {\n        // ignore\n      }\n      return {\n        parsedUrl: url && urlToPathAndParams(url, uriPrefix),\n        userProvidedStartupState: loadedNavState\n      };\n    }\n\n    componentDidCatch(e) {\n      if (_reactNavigationIsHydratingState) {\n        _reactNavigationIsHydratingState = false;\n        console.warn('Uncaught exception while starting app from persisted navigation state! Trying to render again with a fresh navigation state...');\n        this.dispatch(NavigationActions.init());\n      } else {\n        throw e;\n      }\n    }\n\n    _persistNavigationState = async nav => {\n      const { persistNavigationState } = this.props;\n      if (persistNavigationState) {\n        try {\n          await persistNavigationState(nav);\n        } catch (err) {\n          console.warn('Uncaught exception while calling persistNavigationState()! You should handle exceptions thrown from persistNavigationState(), ignoring them may result in undefined behavior.');\n        }\n      }\n    };\n\n    componentWillUnmount() {\n      this._isMounted = false;\n      Linking.removeEventListener('url', this._handleOpenURL);\n      this.subs && this.subs.remove();\n\n      if (this._isStateful()) {\n        _statefulContainerCount--;\n      }\n    }\n\n    // Per-tick temporary storage for state.nav\n\n    dispatch = action => {\n      if (this.props.navigation) {\n        return this.props.navigation.dispatch(action);\n      }\n\n      // navState will have the most up-to-date value, because setState sometimes behaves asyncronously\n      this._navState = this._navState || this.state.nav;\n      const lastNavState = this._navState;\n      invariant(lastNavState, 'should be set in constructor if stateful');\n      const reducedState = Component.router.getStateForAction(action, lastNavState);\n      const navState = reducedState === null ? lastNavState : reducedState;\n\n      const dispatchActionEvents = () => {\n        this._actionEventSubscribers.forEach(subscriber => subscriber({\n          type: 'action',\n          action,\n          state: navState,\n          lastState: lastNavState\n        }));\n      };\n\n      if (reducedState === null) {\n        // The router will return null when action has been handled and the state hasn't changed.\n        // dispatch returns true when something has been handled.\n        dispatchActionEvents();\n        return true;\n      }\n\n      if (navState !== lastNavState) {\n        // Cache updates to state.nav during the tick to ensure that subsequent calls will not discard this change\n        this._navState = navState;\n        this.setState({ nav: navState }, () => {\n          this._onNavigationStateChange(lastNavState, navState, action);\n          dispatchActionEvents();\n          this._persistNavigationState(navState);\n        });\n        return true;\n      }\n\n      dispatchActionEvents();\n      return false;\n    };\n\n    _getScreenProps = () => this.props.screenProps;\n\n    render() {\n      let navigation = this.props.navigation;\n      if (this._isStateful()) {\n        const navState = this.state.nav;\n        if (!navState) {\n          return this._renderLoading();\n        }\n        if (!this._navigation || this._navigation.state !== navState) {\n          this._navigation = getNavigation(Component.router, navState, this.dispatch, this._actionEventSubscribers, this._getScreenProps, () => this._navigation);\n        }\n        navigation = this._navigation;\n      }\n      invariant(navigation, 'failed to get navigation');\n      return <NavigationProvider value={navigation}>\n          <Component {...this.props} navigation={navigation} />\n        </NavigationProvider>;\n    }\n  }\n\n  return NavigationContainer;\n}"]},"metadata":{},"sourceType":"script"}