{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf3 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _reactLifecyclesCompat = require(\"react-lifecycles-compat\");\n\nvar _reactNativeScreens = require(\"react-native-screens\");\n\nvar _createTabNavigator = _interopRequireDefault(require(\"../utils/createTabNavigator\"));\n\nvar _BottomTabBar = _interopRequireDefault(require(\"../views/BottomTabBar\"));\n\nvar _ResourceSavingScene = _interopRequireDefault(require(\"../views/ResourceSavingScene\"));\n\nvar _jsxFileName = \"/Users/diyarkudrat/Term_5/spd1.5/react-native-spotify-master/example/node_modules/react-navigation-tabs/src/navigators/createBottomTabNavigator.js\";\n\nvar TabNavigationView = function (_React$PureComponent) {\n  (0, _inherits2.default)(TabNavigationView, _React$PureComponent);\n\n  function TabNavigationView() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    (0, _classCallCheck2.default)(this, TabNavigationView);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(TabNavigationView)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      loaded: [_this.props.navigation.state.index]\n    };\n\n    _this._renderTabBar = function () {\n      var _this$props = _this.props,\n          _this$props$tabBarCom = _this$props.tabBarComponent,\n          TabBarComponent = _this$props$tabBarCom === void 0 ? _BottomTabBar.default : _this$props$tabBarCom,\n          tabBarOptions = _this$props.tabBarOptions,\n          navigation = _this$props.navigation,\n          screenProps = _this$props.screenProps,\n          getLabelText = _this$props.getLabelText,\n          getAccessibilityLabel = _this$props.getAccessibilityLabel,\n          getButtonComponent = _this$props.getButtonComponent,\n          getAccessibilityRole = _this$props.getAccessibilityRole,\n          getAccessibilityStates = _this$props.getAccessibilityStates,\n          getTestID = _this$props.getTestID,\n          renderIcon = _this$props.renderIcon,\n          onTabPress = _this$props.onTabPress,\n          onTabLongPress = _this$props.onTabLongPress;\n      var descriptors = _this.props.descriptors;\n      var state = _this.props.navigation.state;\n      var route = state.routes[state.index];\n      var descriptor = descriptors[route.key];\n      var options = descriptor.options;\n\n      if (options.tabBarVisible === false) {\n        return null;\n      }\n\n      return React.createElement(TabBarComponent, (0, _extends2.default)({}, tabBarOptions, {\n        jumpTo: _this._jumpTo,\n        navigation: navigation,\n        screenProps: screenProps,\n        onTabPress: onTabPress,\n        onTabLongPress: onTabLongPress,\n        getLabelText: getLabelText,\n        getButtonComponent: getButtonComponent,\n        getAccessibilityLabel: getAccessibilityLabel,\n        getAccessibilityRole: getAccessibilityRole,\n        getAccessibilityStates: getAccessibilityStates,\n        getTestID: getTestID,\n        renderIcon: renderIcon,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78\n        }\n      }));\n    };\n\n    _this._jumpTo = function (key) {\n      var _this$props2 = _this.props,\n          navigation = _this$props2.navigation,\n          onIndexChange = _this$props2.onIndexChange;\n      var index = navigation.state.routes.findIndex(function (route) {\n        return route.key === key;\n      });\n      onIndexChange(index);\n    };\n\n    return _this;\n  }\n\n  (0, _createClass2.default)(TabNavigationView, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props3 = this.props,\n          navigation = _this$props3.navigation,\n          renderScene = _this$props3.renderScene,\n          lazy = _this$props3.lazy;\n      var routes = navigation.state.routes;\n      var loaded = this.state.loaded;\n      return React.createElement(_reactNative.View, {\n        style: styles.container,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110\n        }\n      }, React.createElement(_reactNativeScreens.ScreenContainer, {\n        style: styles.pages,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111\n        }\n      }, routes.map(function (route, index) {\n        if (lazy && !loaded.includes(index)) {\n          return null;\n        }\n\n        var isFocused = navigation.state.index === index;\n        return React.createElement(_ResourceSavingScene.default, {\n          key: route.key,\n          style: _reactNative.StyleSheet.absoluteFill,\n          isVisible: isFocused,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 121\n          }\n        }, renderScene({\n          route: route\n        }));\n      })), this._renderTabBar());\n    }\n  }], [{\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(nextProps, prevState) {\n      var index = nextProps.navigation.state.index;\n      return {\n        loaded: prevState.loaded.includes(index) ? prevState.loaded : [].concat((0, _toConsumableArray2.default)(prevState.loaded), [index])\n      };\n    }\n  }]);\n  return TabNavigationView;\n}(React.PureComponent);\n\nTabNavigationView.defaultProps = {\n  lazy: true,\n  getAccessibilityRole: function getAccessibilityRole() {\n    return 'button';\n  },\n  getAccessibilityStates: function getAccessibilityStates(_ref) {\n    var focused = _ref.focused;\n    return focused ? ['selected'] : [];\n  }\n};\n(0, _reactLifecyclesCompat.polyfill)(TabNavigationView);\n\nvar styles = _reactNative.StyleSheet.create({\n  container: {\n    flex: 1,\n    overflow: 'hidden'\n  },\n  pages: {\n    flex: 1\n  }\n});\n\nvar _default = (0, _createTabNavigator.default)(TabNavigationView);\n\nexports.default = _default;","map":{"version":3,"sources":["/Users/diyarkudrat/Term_5/spd1.5/react-native-spotify-master/example/node_modules/react-navigation-tabs/src/navigators/createBottomTabNavigator.js"],"names":["TabNavigationView","state","loaded","props","navigation","index","_renderTabBar","tabBarComponent","TabBarComponent","BottomTabBar","tabBarOptions","screenProps","getLabelText","getAccessibilityLabel","getButtonComponent","getAccessibilityRole","getAccessibilityStates","getTestID","renderIcon","onTabPress","onTabLongPress","descriptors","route","routes","descriptor","key","options","tabBarVisible","_jumpTo","onIndexChange","findIndex","renderScene","lazy","styles","container","pages","map","includes","isFocused","StyleSheet","absoluteFill","nextProps","prevState","React","PureComponent","defaultProps","focused","create","flex","overflow"],"mappings":"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","sourcesContent":["/* @flow */\n\nimport * as React from 'react';\nimport { View, StyleSheet } from 'react-native';\nimport { polyfill } from 'react-lifecycles-compat';\n\n// eslint-disable-next-line import/no-unresolved\nimport { ScreenContainer } from 'react-native-screens';\n\nimport createTabNavigator, {\n  type InjectedProps,\n} from '../utils/createTabNavigator';\nimport BottomTabBar, { type TabBarOptions } from '../views/BottomTabBar';\nimport ResourceSavingScene from '../views/ResourceSavingScene';\n\ntype Props = InjectedProps & {\n  getAccessibilityRole: (props: { route: any }) => string,\n  getAccessibilityStates: (props: { route: any }) => Array<string>,\n  lazy?: boolean,\n  tabBarComponent?: React.ComponentType<*>,\n  tabBarOptions?: TabBarOptions,\n};\n\ntype State = {\n  loaded: number[],\n};\n\nclass TabNavigationView extends React.PureComponent<Props, State> {\n  static defaultProps = {\n    lazy: true,\n    getAccessibilityRole: () => 'button',\n    getAccessibilityStates: ({ focused }) => (focused ? ['selected'] : []),\n  };\n\n  static getDerivedStateFromProps(nextProps, prevState) {\n    const { index } = nextProps.navigation.state;\n\n    return {\n      // Set the current tab to be loaded if it was not loaded before\n      loaded: prevState.loaded.includes(index)\n        ? prevState.loaded\n        : [...prevState.loaded, index],\n    };\n  }\n\n  state = {\n    loaded: [this.props.navigation.state.index],\n  };\n\n  _renderTabBar = () => {\n    const {\n      tabBarComponent: TabBarComponent = BottomTabBar,\n      tabBarOptions,\n      navigation,\n      screenProps,\n      getLabelText,\n      getAccessibilityLabel,\n      getButtonComponent,\n      getAccessibilityRole,\n      getAccessibilityStates,\n      getTestID,\n      renderIcon,\n      onTabPress,\n      onTabLongPress,\n    } = this.props;\n\n    const { descriptors } = this.props;\n    const { state } = this.props.navigation;\n    const route = state.routes[state.index];\n    const descriptor = descriptors[route.key];\n    const options = descriptor.options;\n\n    if (options.tabBarVisible === false) {\n      return null;\n    }\n\n    return (\n      <TabBarComponent\n        {...tabBarOptions}\n        jumpTo={this._jumpTo}\n        navigation={navigation}\n        screenProps={screenProps}\n        onTabPress={onTabPress}\n        onTabLongPress={onTabLongPress}\n        getLabelText={getLabelText}\n        getButtonComponent={getButtonComponent}\n        getAccessibilityLabel={getAccessibilityLabel}\n        getAccessibilityRole={getAccessibilityRole}\n        getAccessibilityStates={getAccessibilityStates}\n        getTestID={getTestID}\n        renderIcon={renderIcon}\n      />\n    );\n  };\n\n  _jumpTo = (key: string) => {\n    const { navigation, onIndexChange } = this.props;\n\n    const index = navigation.state.routes.findIndex(route => route.key === key);\n\n    onIndexChange(index);\n  };\n\n  render() {\n    const { navigation, renderScene, lazy } = this.props;\n    const { routes } = navigation.state;\n    const { loaded } = this.state;\n\n    return (\n      <View style={styles.container}>\n        <ScreenContainer style={styles.pages}>\n          {routes.map((route, index) => {\n            if (lazy && !loaded.includes(index)) {\n              // Don't render a screen if we've never navigated to it\n              return null;\n            }\n\n            const isFocused = navigation.state.index === index;\n\n            return (\n              <ResourceSavingScene\n                key={route.key}\n                style={StyleSheet.absoluteFill}\n                isVisible={isFocused}\n              >\n                {renderScene({ route })}\n              </ResourceSavingScene>\n            );\n          })}\n        </ScreenContainer>\n        {this._renderTabBar()}\n      </View>\n    );\n  }\n}\n\npolyfill(TabNavigationView);\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    overflow: 'hidden',\n  },\n  pages: {\n    flex: 1,\n  },\n});\n\nexport default createTabNavigator(TabNavigationView);\n"]},"metadata":{},"sourceType":"script"}