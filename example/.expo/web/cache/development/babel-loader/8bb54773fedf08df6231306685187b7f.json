{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf3 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _core = require(\"@react-navigation/core\");\n\nvar _DrawerLayout = _interopRequireDefault(require(\"react-native-gesture-handler/DrawerLayout\"));\n\nvar _reactNativeScreens = require(\"react-native-screens\");\n\nvar _DrawerActions = _interopRequireDefault(require(\"../routers/DrawerActions\"));\n\nvar _DrawerSidebar = _interopRequireDefault(require(\"./DrawerSidebar\"));\n\nvar _DrawerGestureContext = _interopRequireDefault(require(\"../utils/DrawerGestureContext\"));\n\nvar _ResourceSavingScene = _interopRequireDefault(require(\"../views/ResourceSavingScene\"));\n\nvar _jsxFileName = \"/Users/diyarkudrat/Term_5/spd1.5/react-native-spotify-master/example/node_modules/react-navigation-drawer/dist/views/DrawerView.js\";\n\nvar DrawerView = function (_React$PureComponent) {\n  (0, _inherits2.default)(DrawerView, _React$PureComponent);\n\n  function DrawerView() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    (0, _classCallCheck2.default)(this, DrawerView);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(DrawerView)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      loaded: [_this.props.navigation.state.index],\n      drawerWidth: typeof _this.props.navigationConfig.drawerWidth === 'function' ? _this.props.navigationConfig.drawerWidth() : _this.props.navigationConfig.drawerWidth\n    };\n    _this.drawerGestureRef = _react.default.createRef();\n\n    _this._handleDrawerStateChange = function (newState, willShow) {\n      if (newState === 'Idle') {\n        if (!_this.props.navigation.state.isDrawerIdle) {\n          _this.props.navigation.dispatch({\n            type: _DrawerActions.default.MARK_DRAWER_IDLE,\n            key: _this.props.navigation.state.key\n          });\n        }\n      } else if (newState === 'Settling') {\n        _this.props.navigation.dispatch({\n          type: _DrawerActions.default.MARK_DRAWER_SETTLING,\n          key: _this.props.navigation.state.key,\n          willShow: willShow\n        });\n      } else {\n        if (_this.props.navigation.state.isDrawerIdle) {\n          _this.props.navigation.dispatch({\n            type: _DrawerActions.default.MARK_DRAWER_ACTIVE,\n            key: _this.props.navigation.state.key\n          });\n        }\n      }\n    };\n\n    _this._handleDrawerOpen = function () {\n      _this.props.navigation.dispatch({\n        type: _DrawerActions.default.DRAWER_OPENED,\n        key: _this.props.navigation.state.key\n      });\n    };\n\n    _this._handleDrawerClose = function () {\n      _this.props.navigation.dispatch({\n        type: _DrawerActions.default.DRAWER_CLOSED,\n        key: _this.props.navigation.state.key\n      });\n    };\n\n    _this._updateWidth = function () {\n      var drawerWidth = typeof _this.props.navigationConfig.drawerWidth === 'function' ? _this.props.navigationConfig.drawerWidth() : _this.props.navigationConfig.drawerWidth;\n\n      if (_this.state.drawerWidth !== drawerWidth) {\n        _this.setState({\n          drawerWidth: drawerWidth\n        });\n      }\n    };\n\n    _this._renderNavigationView = function (drawerOpenProgress) {\n      return _react.default.createElement(_DrawerGestureContext.default.Provider, {\n        value: _this.drawerGestureRef,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122\n        }\n      }, _react.default.createElement(_DrawerSidebar.default, (0, _extends2.default)({\n        screenProps: _this.props.screenProps,\n        drawerOpenProgress: drawerOpenProgress,\n        navigation: _this.props.navigation,\n        descriptors: _this.props.descriptors,\n        contentComponent: _this.props.navigationConfig.contentComponent,\n        contentOptions: _this.props.navigationConfig.contentOptions,\n        drawerPosition: _this.props.navigationConfig.drawerPosition,\n        style: _this.props.navigationConfig.style\n      }, _this.props.navigationConfig, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123\n        }\n      })));\n    };\n\n    _this._renderContent = function () {\n      var _this$props = _this.props,\n          lazy = _this$props.lazy,\n          navigation = _this$props.navigation;\n      var loaded = _this.state.loaded;\n      var routes = navigation.state.routes;\n\n      if (_this.props.navigationConfig.unmountInactiveRoutes) {\n        var activeKey = navigation.state.routes[navigation.state.index].key;\n        var descriptor = _this.props.descriptors[activeKey];\n        return _react.default.createElement(_core.SceneView, {\n          navigation: descriptor.navigation,\n          screenProps: _this.props.screenProps,\n          component: descriptor.getComponent(),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 136\n          }\n        });\n      } else {\n        return _react.default.createElement(_reactNativeScreens.ScreenContainer, {\n          style: styles.pages,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 138\n          }\n        }, routes.map(function (route, index) {\n          if (lazy && !loaded.includes(index)) {\n            return null;\n          }\n\n          var isFocused = navigation.state.index === index;\n          var descriptor = _this.props.descriptors[route.key];\n          return _react.default.createElement(_ResourceSavingScene.default, {\n            key: route.key,\n            style: [_reactNative.StyleSheet.absoluteFill, {\n              opacity: isFocused ? 1 : 0\n            }],\n            isVisible: isFocused,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 148\n            }\n          }, _react.default.createElement(_core.SceneView, {\n            navigation: descriptor.navigation,\n            screenProps: _this.props.screenProps,\n            component: descriptor.getComponent(),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 149\n            }\n          }));\n        }));\n      }\n    };\n\n    _this._setDrawerGestureRef = function (ref) {\n      _this.drawerGestureRef.current = ref;\n    };\n\n    return _this;\n  }\n\n  (0, _createClass2.default)(DrawerView, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      _reactNative.Dimensions.addEventListener('change', this._updateWidth);\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      var _this2 = this;\n\n      var _this$props$navigatio = this.props.navigation.state,\n          openId = _this$props$navigatio.openId,\n          closeId = _this$props$navigatio.closeId,\n          toggleId = _this$props$navigatio.toggleId,\n          isDrawerOpen = _this$props$navigatio.isDrawerOpen;\n      var _prevProps$navigation = prevProps.navigation.state,\n          prevOpenId = _prevProps$navigation.openId,\n          prevCloseId = _prevProps$navigation.closeId,\n          prevToggleId = _prevProps$navigation.toggleId;\n      var prevIds = [prevOpenId, prevCloseId, prevToggleId];\n      var changedIds = [openId, closeId, toggleId].filter(function (id) {\n        return !prevIds.includes(id);\n      }).sort(function (a, b) {\n        return a > b;\n      });\n      changedIds.forEach(function (id) {\n        if (id === openId) {\n          _this2._drawer.openDrawer();\n        } else if (id === closeId) {\n          _this2._drawer.closeDrawer();\n        } else if (id === toggleId) {\n          if (isDrawerOpen) {\n            _this2._drawer.closeDrawer();\n          } else {\n            _this2._drawer.openDrawer();\n          }\n        }\n      });\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      _reactNative.Dimensions.removeEventListener('change', this._updateWidth);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      var navigation = this.props.navigation;\n      var activeKey = navigation.state.routes[navigation.state.index].key;\n      var drawerLockMode = this.props.descriptors[activeKey].options.drawerLockMode;\n      return _react.default.createElement(_DrawerLayout.default, {\n        ref: function ref(c) {\n          _this3._drawer = c;\n        },\n        onGestureRef: this._setDrawerGestureRef,\n        drawerLockMode: drawerLockMode || this.props.screenProps && this.props.screenProps.drawerLockMode || this.props.navigationConfig.drawerLockMode,\n        drawerBackgroundColor: this.props.navigationConfig.drawerBackgroundColor,\n        keyboardDismissMode: this.props.navigationConfig.keyboardDismissMode,\n        drawerWidth: this.state.drawerWidth,\n        onDrawerOpen: this._handleDrawerOpen,\n        onDrawerClose: this._handleDrawerClose,\n        onDrawerStateChanged: this._handleDrawerStateChange,\n        useNativeAnimations: this.props.navigationConfig.useNativeAnimations,\n        renderNavigationView: this._renderNavigationView,\n        drawerPosition: this.props.navigationConfig.drawerPosition === 'right' ? _DrawerLayout.default.positions.Right : _DrawerLayout.default.positions.Left,\n        drawerType: this.props.navigationConfig.drawerType,\n        edgeWidth: this.props.navigationConfig.edgeWidth,\n        hideStatusBar: this.props.navigationConfig.hideStatusBar,\n        statusBarAnimation: this.props.navigationConfig.statusBarAnimation,\n        minSwipeDistance: this.props.navigationConfig.minSwipeDistance,\n        overlayColor: this.props.navigationConfig.overlayColor,\n        drawerContainerStyle: this.props.navigationConfig.drawerContainerStyle,\n        contentContainerStyle: this.props.navigationConfig.contentContainerStyle,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 165\n        }\n      }, _react.default.createElement(_DrawerGestureContext.default.Provider, {\n        value: this.drawerGestureRef,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 170\n        }\n      }, this._renderContent()));\n    }\n  }], [{\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(nextProps, prevState) {\n      var index = nextProps.navigation.state.index;\n      return {\n        loaded: prevState.loaded.includes(index) ? prevState.loaded : [].concat((0, _toConsumableArray2.default)(prevState.loaded), [index])\n      };\n    }\n  }]);\n  return DrawerView;\n}(_react.default.PureComponent);\n\nexports.default = DrawerView;\nDrawerView.defaultProps = {\n  lazy: true\n};\n\nvar styles = _reactNative.StyleSheet.create({\n  pages: {\n    flex: 1\n  }\n});","map":{"version":3,"sources":["/Users/diyarkudrat/Term_5/spd1.5/react-native-spotify-master/example/node_modules/react-navigation-drawer/dist/views/DrawerView.js"],"names":["DrawerView","state","loaded","props","navigation","index","drawerWidth","navigationConfig","drawerGestureRef","React","createRef","_handleDrawerStateChange","newState","willShow","isDrawerIdle","dispatch","type","DrawerActions","MARK_DRAWER_IDLE","key","MARK_DRAWER_SETTLING","MARK_DRAWER_ACTIVE","_handleDrawerOpen","DRAWER_OPENED","_handleDrawerClose","DRAWER_CLOSED","_updateWidth","setState","_renderNavigationView","drawerOpenProgress","screenProps","descriptors","contentComponent","contentOptions","drawerPosition","style","_renderContent","lazy","routes","unmountInactiveRoutes","activeKey","descriptor","getComponent","styles","pages","map","route","includes","isFocused","StyleSheet","absoluteFill","opacity","_setDrawerGestureRef","ref","current","Dimensions","addEventListener","prevProps","openId","closeId","toggleId","isDrawerOpen","prevOpenId","prevCloseId","prevToggleId","prevIds","changedIds","filter","id","sort","a","b","forEach","_drawer","openDrawer","closeDrawer","removeEventListener","drawerLockMode","options","c","drawerBackgroundColor","keyboardDismissMode","useNativeAnimations","DrawerLayout","positions","Right","Left","drawerType","edgeWidth","hideStatusBar","statusBarAnimation","minSwipeDistance","overlayColor","drawerContainerStyle","contentContainerStyle","nextProps","prevState","PureComponent","defaultProps","create","flex"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Dimensions, StyleSheet } from 'react-native';\nimport { SceneView } from '@react-navigation/core';\nimport DrawerLayout from 'react-native-gesture-handler/DrawerLayout';\nimport { ScreenContainer } from 'react-native-screens';\n\nimport DrawerActions from '../routers/DrawerActions';\nimport DrawerSidebar from './DrawerSidebar';\nimport DrawerGestureContext from '../utils/DrawerGestureContext';\nimport ResourceSavingScene from '../views/ResourceSavingScene';\n\n/**\n * Component that renders the drawer.\n */\nexport default class DrawerView extends React.PureComponent {\n  static defaultProps = {\n    lazy: true\n  };\n\n  static getDerivedStateFromProps(nextProps, prevState) {\n    const { index } = nextProps.navigation.state;\n\n    return {\n      // Set the current tab to be loaded if it was not loaded before\n      loaded: prevState.loaded.includes(index) ? prevState.loaded : [...prevState.loaded, index]\n    };\n  }\n\n  state = {\n    loaded: [this.props.navigation.state.index],\n    drawerWidth: typeof this.props.navigationConfig.drawerWidth === 'function' ? this.props.navigationConfig.drawerWidth() : this.props.navigationConfig.drawerWidth\n  };\n\n  componentDidMount() {\n    Dimensions.addEventListener('change', this._updateWidth);\n  }\n\n  componentDidUpdate(prevProps) {\n    const {\n      openId,\n      closeId,\n      toggleId,\n      isDrawerOpen\n    } = this.props.navigation.state;\n    const {\n      openId: prevOpenId,\n      closeId: prevCloseId,\n      toggleId: prevToggleId\n    } = prevProps.navigation.state;\n\n    let prevIds = [prevOpenId, prevCloseId, prevToggleId];\n    let changedIds = [openId, closeId, toggleId].filter(id => !prevIds.includes(id)).sort((a, b) => a > b);\n\n    changedIds.forEach(id => {\n      if (id === openId) {\n        this._drawer.openDrawer();\n      } else if (id === closeId) {\n        this._drawer.closeDrawer();\n      } else if (id === toggleId) {\n        if (isDrawerOpen) {\n          this._drawer.closeDrawer();\n        } else {\n          this._drawer.openDrawer();\n        }\n      }\n    });\n  }\n\n  componentWillUnmount() {\n    Dimensions.removeEventListener('change', this._updateWidth);\n  }\n\n  drawerGestureRef = React.createRef();\n\n  _handleDrawerStateChange = (newState, willShow) => {\n    if (newState === 'Idle') {\n      if (!this.props.navigation.state.isDrawerIdle) {\n        this.props.navigation.dispatch({\n          type: DrawerActions.MARK_DRAWER_IDLE,\n          key: this.props.navigation.state.key\n        });\n      }\n    } else if (newState === 'Settling') {\n      this.props.navigation.dispatch({\n        type: DrawerActions.MARK_DRAWER_SETTLING,\n        key: this.props.navigation.state.key,\n        willShow\n      });\n    } else {\n      if (this.props.navigation.state.isDrawerIdle) {\n        this.props.navigation.dispatch({\n          type: DrawerActions.MARK_DRAWER_ACTIVE,\n          key: this.props.navigation.state.key\n        });\n      }\n    }\n  };\n\n  _handleDrawerOpen = () => {\n    this.props.navigation.dispatch({\n      type: DrawerActions.DRAWER_OPENED,\n      key: this.props.navigation.state.key\n    });\n  };\n\n  _handleDrawerClose = () => {\n    this.props.navigation.dispatch({\n      type: DrawerActions.DRAWER_CLOSED,\n      key: this.props.navigation.state.key\n    });\n  };\n\n  _updateWidth = () => {\n    const drawerWidth = typeof this.props.navigationConfig.drawerWidth === 'function' ? this.props.navigationConfig.drawerWidth() : this.props.navigationConfig.drawerWidth;\n\n    if (this.state.drawerWidth !== drawerWidth) {\n      this.setState({ drawerWidth });\n    }\n  };\n\n  _renderNavigationView = drawerOpenProgress => {\n    return <DrawerGestureContext.Provider value={this.drawerGestureRef}>\n        <DrawerSidebar screenProps={this.props.screenProps} drawerOpenProgress={drawerOpenProgress} navigation={this.props.navigation} descriptors={this.props.descriptors} contentComponent={this.props.navigationConfig.contentComponent} contentOptions={this.props.navigationConfig.contentOptions} drawerPosition={this.props.navigationConfig.drawerPosition} style={this.props.navigationConfig.style} {...this.props.navigationConfig} />\n      </DrawerGestureContext.Provider>;\n  };\n\n  _renderContent = () => {\n    let { lazy, navigation } = this.props;\n    let { loaded } = this.state;\n    let { routes } = navigation.state;\n\n    if (this.props.navigationConfig.unmountInactiveRoutes) {\n      let activeKey = navigation.state.routes[navigation.state.index].key;\n      let descriptor = this.props.descriptors[activeKey];\n\n      return <SceneView navigation={descriptor.navigation} screenProps={this.props.screenProps} component={descriptor.getComponent()} />;\n    } else {\n      return <ScreenContainer style={styles.pages}>\n          {routes.map((route, index) => {\n          if (lazy && !loaded.includes(index)) {\n            // Don't render a screen if we've never navigated to it\n            return null;\n          }\n\n          let isFocused = navigation.state.index === index;\n          let descriptor = this.props.descriptors[route.key];\n\n          return <ResourceSavingScene key={route.key} style={[StyleSheet.absoluteFill, { opacity: isFocused ? 1 : 0 }]} isVisible={isFocused}>\n                <SceneView navigation={descriptor.navigation} screenProps={this.props.screenProps} component={descriptor.getComponent()} />\n              </ResourceSavingScene>;\n        })}\n        </ScreenContainer>;\n    }\n  };\n\n  _setDrawerGestureRef = ref => {\n    this.drawerGestureRef.current = ref;\n  };\n\n  render() {\n    const { navigation } = this.props;\n    const activeKey = navigation.state.routes[navigation.state.index].key;\n    const { drawerLockMode } = this.props.descriptors[activeKey].options;\n\n    return <DrawerLayout ref={c => {\n      this._drawer = c;\n    }} onGestureRef={this._setDrawerGestureRef} drawerLockMode={drawerLockMode || this.props.screenProps && this.props.screenProps.drawerLockMode || this.props.navigationConfig.drawerLockMode} drawerBackgroundColor={this.props.navigationConfig.drawerBackgroundColor} keyboardDismissMode={this.props.navigationConfig.keyboardDismissMode} drawerWidth={this.state.drawerWidth} onDrawerOpen={this._handleDrawerOpen} onDrawerClose={this._handleDrawerClose} onDrawerStateChanged={this._handleDrawerStateChange} useNativeAnimations={this.props.navigationConfig.useNativeAnimations} renderNavigationView={this._renderNavigationView} drawerPosition={this.props.navigationConfig.drawerPosition === 'right' ? DrawerLayout.positions.Right : DrawerLayout.positions.Left}\n    /* props specific to react-native-gesture-handler/DrawerLayout */\n    drawerType={this.props.navigationConfig.drawerType} edgeWidth={this.props.navigationConfig.edgeWidth} hideStatusBar={this.props.navigationConfig.hideStatusBar} statusBarAnimation={this.props.navigationConfig.statusBarAnimation} minSwipeDistance={this.props.navigationConfig.minSwipeDistance} overlayColor={this.props.navigationConfig.overlayColor} drawerContainerStyle={this.props.navigationConfig.drawerContainerStyle} contentContainerStyle={this.props.navigationConfig.contentContainerStyle}>\n        <DrawerGestureContext.Provider value={this.drawerGestureRef}>\n          {this._renderContent()}\n        </DrawerGestureContext.Provider>\n      </DrawerLayout>;\n  }\n}\n\nconst styles = StyleSheet.create({\n  pages: {\n    flex: 1\n  }\n});"]},"metadata":{},"sourceType":"script"}