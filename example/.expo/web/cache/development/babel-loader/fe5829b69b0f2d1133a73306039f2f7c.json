{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = withDimensions;\nexports.isOrientationLandscape = void 0;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf3 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _hoistNonReactStatics = _interopRequireDefault(require(\"hoist-non-react-statics\"));\n\nvar _jsxFileName = \"/Users/diyarkudrat/Term_5/spd1.5/react-native-spotify-master/example/node_modules/react-navigation-tabs/src/utils/withDimensions.js\";\n\nvar isOrientationLandscape = function isOrientationLandscape(_ref) {\n  var width = _ref.width,\n      height = _ref.height;\n  return width > height;\n};\n\nexports.isOrientationLandscape = isOrientationLandscape;\n\nfunction withDimensions(WrappedComponent) {\n  var _Dimensions$get = _reactNative.Dimensions.get('window'),\n      width = _Dimensions$get.width,\n      height = _Dimensions$get.height;\n\n  var EnhancedComponent = function (_React$Component) {\n    (0, _inherits2.default)(EnhancedComponent, _React$Component);\n\n    function EnhancedComponent() {\n      var _getPrototypeOf2;\n\n      var _this;\n\n      (0, _classCallCheck2.default)(this, EnhancedComponent);\n\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(EnhancedComponent)).call.apply(_getPrototypeOf2, [this].concat(args)));\n      _this.state = {\n        dimensions: {\n          width: width,\n          height: height\n        },\n        isLandscape: isOrientationLandscape({\n          width: width,\n          height: height\n        })\n      };\n\n      _this.handleOrientationChange = function (_ref2) {\n        var window = _ref2.window;\n        var isLandscape = isOrientationLandscape(window);\n\n        _this.setState({\n          isLandscape: isLandscape\n        });\n      };\n\n      return _this;\n    }\n\n    (0, _createClass2.default)(EnhancedComponent, [{\n      key: \"componentDidMount\",\n      value: function componentDidMount() {\n        _reactNative.Dimensions.addEventListener('change', this.handleOrientationChange);\n      }\n    }, {\n      key: \"componentWillUnmount\",\n      value: function componentWillUnmount() {\n        _reactNative.Dimensions.removeEventListener('change', this.handleOrientationChange);\n      }\n    }, {\n      key: \"render\",\n      value: function render() {\n        return React.createElement(WrappedComponent, (0, _extends2.default)({}, this.props, this.state, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 32\n          }\n        }));\n      }\n    }]);\n    return EnhancedComponent;\n  }(React.Component);\n\n  EnhancedComponent.displayName = \"withDimensions(\" + WrappedComponent.displayName + \")\";\n  return (0, _hoistNonReactStatics.default)(EnhancedComponent, WrappedComponent);\n}","map":{"version":3,"sources":["/Users/diyarkudrat/Term_5/spd1.5/react-native-spotify-master/example/node_modules/react-navigation-tabs/src/utils/withDimensions.js"],"names":["isOrientationLandscape","width","height","withDimensions","WrappedComponent","Dimensions","get","EnhancedComponent","state","dimensions","isLandscape","handleOrientationChange","window","setState","addEventListener","removeEventListener","props","React","Component","displayName"],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;;;AAEO,IAAMA,sBAAsB,GAAG,SAAzBA,sBAAyB;AAAA,MAAGC,KAAH,QAAGA,KAAH;AAAA,MAAUC,MAAV,QAAUA,MAAV;AAAA,SAAuBD,KAAK,GAAGC,MAA/B;AAAA,CAA/B;;;;AAEQ,SAASC,cAAT,CAAwBC,gBAAxB,EAA0C;AAAA,wBAC7BC,wBAAWC,GAAX,CAAe,QAAf,CAD6B;AAAA,MAC/CL,KAD+C,mBAC/CA,KAD+C;AAAA,MACxCC,MADwC,mBACxCA,MADwC;;AAAA,MAGjDK,iBAHiD;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA,YAMrDC,KANqD,GAM7C;AACNC,QAAAA,UAAU,EAAE;AAAER,UAAAA,KAAK,EAALA,KAAF;AAASC,UAAAA,MAAM,EAANA;AAAT,SADN;AAENQ,QAAAA,WAAW,EAAEV,sBAAsB,CAAC;AAAEC,UAAAA,KAAK,EAALA,KAAF;AAASC,UAAAA,MAAM,EAANA;AAAT,SAAD;AAF7B,OAN6C;;AAAA,YAmBrDS,uBAnBqD,GAmB3B,iBAAgB;AAAA,YAAbC,MAAa,SAAbA,MAAa;AACxC,YAAMF,WAAW,GAAGV,sBAAsB,CAACY,MAAD,CAA1C;;AACA,cAAKC,QAAL,CAAc;AAAEH,UAAAA,WAAW,EAAXA;AAAF,SAAd;AACD,OAtBoD;;AAAA;AAAA;;AAAA;AAAA;AAAA,0CAWjC;AAClBL,gCAAWS,gBAAX,CAA4B,QAA5B,EAAsC,KAAKH,uBAA3C;AACD;AAboD;AAAA;AAAA,6CAe9B;AACrBN,gCAAWU,mBAAX,CAA+B,QAA/B,EAAyC,KAAKJ,uBAA9C;AACD;AAjBoD;AAAA;AAAA,+BAwB5C;AACP,eAAO,oBAAC,gBAAD,6BAAsB,KAAKK,KAA3B,EAAsC,KAAKR,KAA3C;AAAA;AAAA;AAAA;AAAA;AAAA,WAAP;AACD;AA1BoD;AAAA;AAAA,IAGvBS,KAAK,CAACC,SAHiB;;AAGjDX,EAAAA,iBAHiD,CAI9CY,WAJ8C,uBAIdf,gBAAgB,CAACe,WAJH;AA6BvD,SAAO,mCAAoBZ,iBAApB,EAAuCH,gBAAvC,CAAP;AACD","sourcesContent":["import * as React from 'react';\nimport { Dimensions } from 'react-native';\nimport hoistNonReactStatic from 'hoist-non-react-statics';\n\nexport const isOrientationLandscape = ({ width, height }) => width > height;\n\nexport default function withDimensions(WrappedComponent) {\n  const { width, height } = Dimensions.get('window');\n\n  class EnhancedComponent extends React.Component {\n    static displayName = `withDimensions(${WrappedComponent.displayName})`;\n\n    state = {\n      dimensions: { width, height },\n      isLandscape: isOrientationLandscape({ width, height }),\n    };\n\n    componentDidMount() {\n      Dimensions.addEventListener('change', this.handleOrientationChange);\n    }\n\n    componentWillUnmount() {\n      Dimensions.removeEventListener('change', this.handleOrientationChange);\n    }\n\n    handleOrientationChange = ({ window }) => {\n      const isLandscape = isOrientationLandscape(window);\n      this.setState({ isLandscape });\n    };\n\n    render() {\n      return <WrappedComponent {...this.props} {...this.state} />;\n    }\n  }\n\n  return hoistNonReactStatic(EnhancedComponent, WrappedComponent);\n}\n"]},"metadata":{},"sourceType":"script"}